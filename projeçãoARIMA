#instala e carrega pacote exigido
getwd() library(readr) library(tidyverse) library(forecast) library(lubridate)

vd_luisa_tcc <- read.csv("~/Desktop/vd_luisa_tcc.csv", sep=";")

vd_luisa_tcc <- read_delim("~/Desktop/vd_luisa_tcc.csv", ";", escape_double = FALSE, trim_ws = TRUE)

vd_luisa_tcc$MES_ANO <- paste0(vd_luisa_tcc$MES, "-", vd_luisa_tcc$ANO)

#organizar por mes/ano aggregate(vd_luisa_tcc$VISITAS,list(unidade = vd_luisa_tcc$UNIDADE, MES_ANO = vd_luisa_tcc$MES_ANO),sum) -> tabela

tabela

#transforma em MES_ANO tabela$MES_ANO = parse_date_time(tabela$MES_ANO,"my") tabela$MES_ANO

tabela <- tabela[!(as.character(tabela$MES_ANO) %in% c("2019-03-01","2019-04-01","2019-05-01")),]

tabela

#ordena crono tabela = tabela[order(tabela$MES_ANO),]

tabela

#meses de greve (em formato de MES_ANO)

greve = parse_date_time( c('15/05','16/03','17/01','17/02','18/04','18/05'),"ym") greve

#repete para cada unidade for(j in unique(tabela$unidade)) {

#tabela temporaria com só um
turnip = tabela[tabela$unidade==j,]

#repete para cada mes
for(i in turnip$MES_ANO ){
    
    #se for um mes de greve
    if (i %in% greve){
        
        #seleciona os meses anterior e posterior:
        
        
        ant= max(                                   # pega o maior mês (mais recente)
            turnip$MES_ANO[!(turnip$MES_ANO %in% greve) & # que não está em greve E
                            turnip$MES_ANO < i           # que é menor (antes) do atual
            ]                
        )
        
        #mesma lógica na linha de baixo 
        pos= min(turnip$MES_ANO[!(turnip$MES_ANO %in% greve) & turnip$MES_ANO > i])
        
        
        if(any(is.na(c(format(ant),format(pos))))) {         #testa se achou um mes antes e outro depois (pq pode não existir)
            
            NA -> tabela[tabela$MES_ANO==i & tabela$unidade==j,3]    #atribui NA nesse caso
            
        } else {         
        mean(c(turnip[turnip$MES_ANO==ant,3],turnip[turnip$MES_ANO==pos,3])) -> tabela[tabela$MES_ANO==i & tabela$unidade==j,3]     # se tiver mes antes e depois, tira média e atribui
        }
    }
}
}

    #fecha if do mes de greve
#fecha loop de MES_ANO
#fecha loop de unidade

tabela$greve = tabela$MES_ANO %in% greve #marca os meses de greve na tabela, pq não?

#tabela$MES_ANO = format(tabela$MES_ANO,"%m/%Y") #transforma de volta em mês/ano. O negativo é que volta a ser caracter, o positivo é que é mais fácil de ler.

tabela colnames(tabela) = c("UNIDADES","MES_ANO","VISITAS","GREVE") novo_objeto <- tabela

florianopolis <- novo_objeto unidades <- novo_objeto

florianopolis <- florianopolis %>% group_by(MES_ANO) %>% summarise(VISITAS = sum(VISITAS, na.rm = TRUE)) florianopolis

#dev.off()

ggplot(florianopolis, aes(MES_ANO, VISITAS, group = 1)) + geom_line()

modelo1 <- auto.arima(florianopolis$VISITAS, lambda = 0 , biasadj = TRUE, stepwise = FALSE, approximation = FALSE, ic = "aic")

modelo1 %>% summary()

modelo1 %>% forecast(h=20) %>% plot() modelo1 %>% forecast(h=20) %>% plot(main= "Projeção de visitas domiciliares em Florianópolis, para o período de 20 meses") modelo1

title( xlab = "Meses observados" , ylab = "Número de visitas")

modelo2 <- modelo1 %>% forecast(h=20)

modelo2

unidades <- unidades %>% group_by(MES_ANO, UNIDADES) %>% summarise(VISITAS = sum(VISITAS, na.rm = TRUE))

modelo = list() for (i in unique( unidades$UNIDADES)){ ABRAAO <- subset(unidades, unidades$UNIDADES == i )

modelo[[i]] <- auto.arima(ABRAAO$VISITAS, lambda = "auto", biasadj = TRUE,
                          stepwise = FALSE, approximation = FALSE, ic = "aic")
}

modelo = list() for (i in unique( unidades$UNIDADES)){ projecao <- subset(unidades, unidades$UNIDADES == i )

modelo[[i]] <- auto.arima(projecao$VISITAS, lambda = 0, biasadj = TRUE,
                       stepwise = FALSE, approximation = FALSE, ic = "aic")

}
modelo[[3]] %>% summary()

modelo %>% summary()

modelo

#ABRAAO modelo [[1]] %>% forecast(h=20) %>% plot(main= "Projeção de atendimentos domiciliares no Centro de Saúde Abrãao, para o período de 20 meses")
